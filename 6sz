#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netdb.h>
#include <string.h>



/*
socket
bind
listen

while(1){
	select(ha listener){
		accept
	}else{
		recv
	}
}

// * ha elerjuk a maxclientset,
// akkor is accepteljunk
// de egybol bontsuk is hogy ne csak varjon a kliens
// * listenerre ne küldjünk
// select kiszedi a setbol amiken nem volt adat, ezert ketto set kell
// klienseket lancolt listaban taroljuk

*/

struct client{
	int clientfd;
	struct client* next;
};
/*
struct client* addClient(struct client* head, int fd){
	struct client* newClient = (struct client*)malloc(sizeof(struct client));
	newClient->clientfd=fd;
	newClient->next = head;
	head = newClient;
	return newClient;
}

void removeClient(struct client* head, int fd){
	if(head == NULL)
		return;
	struct client* c = head;
	if(c->clientfd == fd){
		head = c->next;
		free(c);
		return;
	}
	while(c != NULL && c->clientfd != fd){
		c = c->next;
	}
	if(c->clientfd == fd){
		struct client* cprev = head;
		while(cprev->next && cprev->next != c){
			cprev = cprev->next;
		}
		cprev->next = c->next;
		free(c);
	}
}
*/


int main(void) {

	int MAXCLIENTS = 2;
	int clientcount = 0;
	struct client* head = NULL;

	struct addrinfo hints, *res;
	int listener;

	//listener
	memset(&hints, 0, sizeof hints);
	hints.ai_family = AF_UNSPEC;
	hints.ai_socktype = SOCK_STREAM;
	hints.ai_flags = AI_PASSIVE;

	getaddrinfo("localhost","1111", &hints, &res);

	listener = socket(res->ai_family, res->ai_socktype, res->ai_protocol);

	int yes=1;
	setsockopt(listener,SOL_SOCKET,SO_REUSEADDR,&yes,sizeof(int));

	bind(listener, res->ai_addr, res->ai_addrlen);

	listen(listener, 10);
	//

	fd_set master, readfds;		//master az eredeti set
	FD_ZERO(&master);
	FD_SET(listener, &master);

	int fdmax = listener;
	int i,j,k;

	int newfd;
	char buf[250]="";

	int hisztogram[256];
	char newmsg[500]="";

	while(1){

		readfds = master;
		select(fdmax+1, &readfds, NULL, NULL, NULL);

		for(i=0;i<=fdmax;i++){

			if(FD_ISSET(i, &readfds)){

				if(i==listener){
					newfd=accept(listener, 0, 0);
					if(MAXCLIENTS > clientcount){
						clientcount++;
						FD_SET(newfd, &master);

						struct client* newClient = (struct client*)malloc(sizeof(struct client));
							newClient->clientfd=newfd;
							newClient->next = head;
							head = newClient;

						if(newfd > fdmax){
							fdmax = newfd;
						}
					}else{
						close(newfd);
					}

				}else{
					memset(&buf, 0, sizeof buf);
					int recvbytes = recv(i, buf, sizeof buf, 0);		//ha recvbytes == 0 bontani kell a kapcsolatot stb
					if(recvbytes == 0){
						close(i);
						clientcount--;
						FD_CLR(i, &master);

						if(head != NULL){

							struct client* c = head;
							if(c->clientfd == i){
								head = c->next;
								free(c);
							}else{
								while(c != NULL && c->clientfd != i){
									c = c->next;
								}
								if(c->clientfd == i){
									struct client* cprev = head;
									while(cprev->next && cprev->next != c){
										cprev = cprev->next;
									}
									cprev->next = c->next;
									free(c);
								}
							}
						}

					}else{
						buf[recvbytes-2] = '\n';
						buf[recvbytes-1] = '\0';

						//modify the message
						memset(&newmsg, 0, sizeof newmsg);
						sprintf(newmsg, "%s\tSocket: %d\t", buf, i);

						char tempchar[6]="";

						for(k=0;k<256;k++){
							hisztogram[k]=0;
						}
						for(k=0;k<strlen(buf);k++){
							hisztogram[buf[k]]++;
						}
						for(k=0;k<256;k++){
							if(hisztogram[k] > 0 && k > 31){
								sprintf(tempchar, "%c", k);
								strcat(newmsg, tempchar);
								sprintf(tempchar, "%d", hisztogram[k]);
								strcat(newmsg, " : ");
								strcat(newmsg, tempchar);
								strcat(newmsg, "  ");
							}
						}

						strcat(newmsg, "\n");
						puts(newmsg);
						//

						for(j=0;j<=fdmax;j++){
							if(i!=j && j!=listener && FD_ISSET(j, &master)){
								//send(j, buf, strlen(buf), 0);
								send(j, newmsg, strlen(newmsg), 0);
							}
						}
					}
				}
			}
		}
	}

	freeaddrinfo(res);

	return EXIT_SUCCESS;
}
