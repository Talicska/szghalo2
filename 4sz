#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netdb.h>

/*
//server
getaddrinfo
socket
bind
recvfrom
getaddrinfo
sendto

//client
getaddrinfo
socket
sendto
recvfrom
*/


int main() {


	struct addrinfo hints;
	struct addrinfo *res;
	int sockfd;
	char buf[512]="";

	memset(&hints, 0, sizeof hints);
	hints.ai_family = AF_UNSPEC;
	hints.ai_socktype = SOCK_DGRAM;
	hints.ai_flags = AI_PASSIVE;

	if(getaddrinfo(NULL, "1111", &hints, &res) != 0)
		return -1;
	sockfd = socket(res->ai_family, res->ai_socktype, res->ai_protocol);
	bind(sockfd, res->ai_addr, res->ai_addrlen);
	socklen_t fromlen;
	struct sockaddr addr;
	fromlen = sizeof addr;
	recvfrom(sockfd, buf, sizeof buf, 0, &addr, &fromlen);
	puts(buf);

	struct addrinfo *res2;
	if(getaddrinfo(buf, NULL, &hints, &res2) != 0)
			return -1;

	struct addrinfo *p = res2;
	void *v;
	char final[512]="";
	char c[INET6_ADDRSTRLEN];
	for(;p!=NULL;p=p->ai_next){
		if(p->ai_family == AF_INET){
			struct sockaddr_in *sa4 = (struct sockaddr_in*)p->ai_addr;
			v = &sa4->sin_addr;
		}else if(p->ai_family == AF_INET6){
			struct sockaddr_in6 *sa6 = (struct sockaddr_in6*)p->ai_addr;
			v = &sa6->sin6_addr;
		}
		inet_ntop(p->ai_family, v, c, sizeof c);
		strcat(final, c);
		strcat(final,"\n");
	}

	sendto(sockfd, final, strlen(final), 0, &addr, fromlen);

	freeaddrinfo(res);
	freeaddrinfo(res2);
	close(sockfd);

	return EXIT_SUCCESS;

}
