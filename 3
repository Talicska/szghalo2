#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <unistd.h>
#include <string.h>
#include <netdb.h>
#include <netinet/in.h>
#include <arpa/inet.h>

//terminalban kliens:  telnet localhost 1111
//setsockopt  	port felszabaditasa, listener utan kell berakni, socket() és bind() kozé
//telnet /r/n -t tesz a vegere,  a c meg /0 -t

int main(void)
{
	struct addrinfo hints, *res;
	int listener, new_fd;

	memset(&hints, 0, sizeof hints);
	hints.ai_family = AF_UNSPEC;
	hints.ai_socktype = SOCK_STREAM;
	hints.ai_flags = AI_PASSIVE;

	getaddrinfo(NULL,"1111", &hints, &res);

	listener = socket(res->ai_family, res->ai_socktype, res->ai_protocol);
	int yes=1;
	setsockopt(listener,SOL_SOCKET,SO_REUSEADDR,&yes,sizeof(int));

	bind(listener, res->ai_addr, res->ai_addrlen);
	listen(listener, 10);

	struct sockaddr theiraddr;
	unsigned int theiraddrsize = sizeof theiraddr;

	new_fd = accept(listener, &theiraddr, &theiraddrsize);
	//itt kell elmenteni majd a cimet,, port kiolvasasa: ntohs(port)
	//uzenetek beirase: sprintf(msg,"asdasd %d",ertek);
	//osszefuzes: strcat

	char ipstr[INET6_ADDRSTRLEN] = "";
	int port = -1;

	if (theiraddr.sa_family == AF_INET){
		struct sockaddr_in *ip4 = &theiraddr;
		void* addr = &ip4->sin_addr;
		inet_ntop(theiraddr.sa_family, addr, ipstr, sizeof ipstr);
		port = ntohs(ip4->sin_port);
	}else{
		struct sockaddr_in6 *ip6 = &theiraddr;
		void* addr = &ip6->sin6_addr;
		inet_ntop(theiraddr.sa_family, addr, ipstr, sizeof ipstr);
		port = ntohs(ip6->sin6_port);
	}

	char final[20];
	char portstr[5];
	sprintf(portstr, "%d", port);
	sprintf(final, "%s", ipstr);
	strcat(final, " : ");
	strcat(final, portstr);
	strcat(final,"\n");
	send(new_fd, final, strlen(final),0);

	close(new_fd);
	close(listener);
	freeaddrinfo(res);

	return EXIT_SUCCESS;
}
